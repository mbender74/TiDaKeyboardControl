/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package it.smc.dakeyboardcontrol;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiDimension;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiUIView;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.proxy.TiWindowProxy;
import ti.modules.titanium.ui.TabGroupProxy;
import ti.modules.titanium.ui.WindowProxy;
import org.appcelerator.titanium.TiBaseActivity;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import ti.modules.titanium.ui.widget.listview.TiNestedRecyclerView;
import ti.modules.titanium.ui.widget.TiUIScrollView;
import androidx.core.widget.NestedScrollView;

import android.util.TypedValue;
import androidx.appcompat.app.AppCompatActivity;
import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.os.Build;
import android.view.ViewGroup;
import android.view.View;
import androidx.core.view.ViewCompat;
import android.view.View.OnLayoutChangeListener;
import android.os.Handler;

import androidx.recyclerview.widget.RecyclerView;
import androidx.core.view.WindowCompat;
import androidx.core.view.WindowInsetsAnimationCompat.Callback;
import androidx.core.view.WindowInsetsAnimationCompat;
import androidx.core.view.WindowInsetsCompat;
import android.content.pm.PackageManager;
import android.view.LayoutInflater;
import android.content.res.Resources;

import androidx.core.view.OnApplyWindowInsetsListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.LinearLayout;
import android.view.WindowManager;
import androidx.annotation.Nullable;


// This proxy can be created by calling TiDAKeyboardControl.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=TiDAKeyboardControlModule.class)
public class ViewProxy extends TiViewProxy
{
	// Standard Debugging variables
	private static final String LCAT = "ViewProxy";
	private static final boolean DBG = TiConfig.LOGD;

	int resId_viewHolder;
	LayoutInflater inflater;
	Activity activity;
	String packageName;
	Resources resources;
	it.smc.dakeyboardcontrol.InsetsAnimationLinearLayout viewWrapper = null;
	TiViewProxy scrollingViewProxy = null;
	TiViewProxy toolbarViewProxy = null;

	public TiUIView scrollingTiView = null;
	public TiUIView toolbarTiView = null;

	View scrollingView = null;
	View toolbarview = null;
	int id_fragmentHolder;
	boolean standaloneWindow;

	boolean autoAdjustBottomPadding;
	boolean autoScrollToBottom;
	boolean autoSizeScrollViewAboveToolbar;
	boolean isTiUIScrollView;

	int windowFlags;
	View rootView;
	boolean showKeyboardOnScrollUp;
	TiCompositeLayout containerView;

	public boolean toolbarListenerSet;
	public RecyclerView recyclerView;
	public int diffPaddingBottom;
	public int initalPaddingBottom;
	public int toolbarHeight;
	public int newBottomPadding;
	public float density;
	public int itemCount;
	public int currentBottomPadding;
	public int initialScrollingViewBottom;



	private class InteractiveView extends TiUIView
	{
		public InteractiveView(TiViewProxy proxy) {
			super(proxy);

			showKeyboardOnScrollUp = false;
			standaloneWindow = false;
			windowFlags = 0;
			activity = proxy.getActivity();
			packageName = activity.getPackageName();
	      	resources = activity.getResources();
			inflater = LayoutInflater.from(activity);
			diffPaddingBottom = 0;
			initalPaddingBottom = 0;
			density = resources.getDisplayMetrics().density;
			toolbarListenerSet = false;
			autoAdjustBottomPadding = false;
			autoScrollToBottom = false;
			autoSizeScrollViewAboveToolbar = false;
			isTiUIScrollView = false;
			toolbarHeight = 0;
			newBottomPadding = 0;
			currentBottomPadding = 0;
			initialScrollingViewBottom = 0;

			LayoutArrangement arrangement = LayoutArrangement.DEFAULT;

			if (proxy.hasProperty(TiC.PROPERTY_LAYOUT)) {
				String layoutProperty = TiConvert.toString(proxy.getProperty(TiC.PROPERTY_LAYOUT));
				if (layoutProperty.equals(TiC.LAYOUT_HORIZONTAL)) {
					arrangement = LayoutArrangement.HORIZONTAL;
				} else if (layoutProperty.equals(TiC.LAYOUT_VERTICAL)) {
					arrangement = LayoutArrangement.VERTICAL;
				}
			}

			containerView = new TiCompositeLayout(proxy.getActivity(), arrangement);


			if (proxy.hasProperty("autoSizeAndKeepScrollingViewAboveToolbar")) {
				autoSizeScrollViewAboveToolbar = TiConvert.toBoolean(proxy.getProperty("autoSizeAndKeepScrollingViewAboveToolbar"));		
			}

			if (proxy.hasProperty("autoScrollToBottom")) {
				autoScrollToBottom = TiConvert.toBoolean(proxy.getProperty("autoScrollToBottom"));		
			}

			if (proxy.hasProperty("autoAdjustBottomPadding")) {
				autoAdjustBottomPadding = TiConvert.toBoolean(proxy.getProperty("autoAdjustBottomPadding"));		
			}

			if (proxy.hasProperty("showKeyboardOnScrollUp")) {
				showKeyboardOnScrollUp = TiConvert.toBoolean(proxy.getProperty("showKeyboardOnScrollUp"));		
			}

			if (proxy.hasProperty("scrollingView")) {
				scrollingViewProxy = (TiViewProxy) proxy.getProperty("scrollingView");

				if (scrollingViewProxy.hasProperty("bottom")) {
					initialScrollingViewBottom = TiConvert.toInt(scrollingViewProxy.getProperty("bottom"));
				}					
			}

			if (proxy.hasProperty("toolbarView")) {
				toolbarViewProxy = (TiViewProxy) proxy.getProperty("toolbarView");		
			}

			resId_viewHolder = resources.getIdentifier("animationlayout", "layout", packageName);
	  	
			inflater = LayoutInflater.from(activity);

			viewWrapper = (it.smc.dakeyboardcontrol.InsetsAnimationLinearLayout) inflater.inflate(resId_viewHolder, null);
			viewWrapper.showOnUp(showKeyboardOnScrollUp);

			viewWrapper.addView(containerView);

			//Log.w(LCAT, "++++++++++++++++++++++++++++++++ WindowType:"+((TiBaseActivity)activity).getWindowProxy().getClass().getName());


			if (((TiBaseActivity)activity).getWindowProxy() instanceof WindowProxy || ((TiBaseActivity)activity).getWindowProxy() instanceof TabGroupProxy) {
				if (((TiBaseActivity)activity).getWindowProxy() instanceof WindowProxy){
					//Log.w(LCAT, "++++++++++++++++++++++++++++++++ WindowProxy:");
					standaloneWindow = true;
				}
				else if (((TiBaseActivity)activity).getWindowProxy() instanceof TabGroupProxy){
					//Log.w(LCAT, "++++++++++++++++++++++++++++++++ TabGroupProxy:");
					standaloneWindow = false;
				}
			}


	        if (scrollingViewProxy != null && toolbarViewProxy != null){

	        	scrollingTiView = scrollingViewProxy.getOrCreateView();
				scrollingView = scrollingTiView.getNativeView();
				toolbarTiView = toolbarViewProxy.getOrCreateView();
				toolbarview = toolbarTiView.getNativeView();

				if (scrollingTiView instanceof TiUIScrollView){
					isTiUIScrollView = true;
				}
				else {
					recyclerView = recursivelyFindRecyclerView(scrollingView);
					if (recyclerView != null && autoAdjustBottomPadding == true){
						recyclerView.setClipChildren(false);
						recyclerView.setClipToPadding(false);
					}
				}

				// LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
				// params.weight = 1.0f;
			  	// viewWrapper.addView(scrollingView,params);
				// viewWrapper.addView(toolbarview);

				containerView.addView(scrollingView,scrollingTiView.getLayoutParams());

				containerView.addView(toolbarview,toolbarTiView.getLayoutParams());

				WindowCompat.setDecorFitsSystemWindows(activity.getWindow(), false); //this is backward compatible version

		  		rootView = activity.getWindow().getDecorView().getRootView();

				int actionbarHeight = determineActionBarHeight(activity);
				int titlebarHeight = determineTitleBarHeight(activity);

				RootViewDeferringInsetsCallback deferringInsetsListener;

		  		if (standaloneWindow == true){
				    deferringInsetsListener = new RootViewDeferringInsetsCallback(WindowInsetsCompat.Type.systemBars(), WindowInsetsCompat.Type.ime(),standaloneWindow,titlebarHeight,actionbarHeight);
		  		}
		  		else {
				    deferringInsetsListener = new RootViewDeferringInsetsCallback(WindowInsetsCompat.Type.systemBars(), WindowInsetsCompat.Type.ime(),standaloneWindow,titlebarHeight,actionbarHeight);
		  		}

			    ViewCompat.setWindowInsetsAnimationCallback(rootView, (Callback)deferringInsetsListener);	    
			    ViewCompat.setOnApplyWindowInsetsListener(rootView, (OnApplyWindowInsetsListener)deferringInsetsListener);


				TranslateDeferringInsetsAnimationCallback toolbarCallback = new TranslateDeferringInsetsAnimationCallback(toolbarview, WindowInsetsCompat.Type.systemBars(), WindowInsetsCompat.Type.ime(), WindowInsetsAnimationCompat.Callback.DISPATCH_MODE_CONTINUE_ON_SUBTREE);
				TranslateDeferringInsetsAnimationCallback scrollviewCallback = new TranslateDeferringInsetsAnimationCallback(scrollingView, WindowInsetsCompat.Type.systemBars(), WindowInsetsCompat.Type.ime(),WindowInsetsAnimationCompat.Callback.DISPATCH_MODE_STOP);

				ViewCompat.setWindowInsetsAnimationCallback(toolbarview, (Callback)toolbarCallback);
				ViewCompat.setWindowInsetsAnimationCallback(scrollingView, (Callback)scrollviewCallback);

				//Log.w(LCAT, "++++++++++++++++++++++++++++++++ bar heights:"+titlebarHeight+" "+actionbarHeight);
				//Log.w(LCAT, " ");
			}
		    setNativeView(viewWrapper);

		    if ((autoAdjustBottomPadding == true && recyclerView != null) || (autoSizeScrollViewAboveToolbar == true && autoAdjustBottomPadding == true)) {
			    toolbarview.addOnLayoutChangeListener(new OnLayoutChangeListener() {
				    @Override
				    public void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {
							if (toolbarListenerSet == false){
								toolbarListenerSet = true;
								initalPaddingBottom = (int)(toolbarview.getHeight() / density + 0.5f) + 1;
							}

							//Log.w(LCAT, " ");

							//Log.w(LCAT, " onLayoutChange "+((int)(toolbarview.getHeight() / density + 0.5f) + 1));

							diffPaddingBottom = (int)((top-oldTop) / density + 0.5f);

							if (diffPaddingBottom < 0){
								diffPaddingBottom = diffPaddingBottom - 1;
							}

								//Log.w(LCAT, " diffPaddingBottom  "+diffPaddingBottom);



							if (recyclerView != null && autoSizeScrollViewAboveToolbar == false){
								currentBottomPadding = (int)(recyclerView.getPaddingBottom() / density + 0.5f);

								if (autoAdjustBottomPadding == true){
									if (currentBottomPadding < initalPaddingBottom){
										currentBottomPadding = initalPaddingBottom;
									}
								}

			   					newBottomPadding = (currentBottomPadding - diffPaddingBottom);
			   					if (newBottomPadding < initalPaddingBottom){
			   						newBottomPadding = initalPaddingBottom;
			   					}
								//Log.w(LCAT, " currentBottomPadding bottom "+currentBottomPadding);

								//Log.w(LCAT, " padding bottom "+newBottomPadding);
							
							}
							else {
								currentBottomPadding = (int)(toolbarview.getHeight() / density + 0.5f);

			   					newBottomPadding = (initialScrollingViewBottom + currentBottomPadding) - 1;

								//Log.w(LCAT, " autoSizeScrollViewAboveToolbar :"+initialScrollingViewBottom+" "+initalPaddingBottom+" "+currentBottomPadding+" "+newBottomPadding);
							}

					    	if (autoSizeScrollViewAboveToolbar == false && recyclerView != null){
								if (autoScrollToBottom == true){
									itemCount = recyclerView.getAdapter().getItemCount();
								}

								recyclerView.post(new Runnable() { 
								    @Override public void run() {
										recyclerView.setPadding(0, 0, 0, (int)(newBottomPadding * density + 0.5f));
								    	//Log.w(LCAT, " setPadding padding bottom "+(int)(newBottomPadding * density + 0.5f));

										if (autoScrollToBottom == true && itemCount > 0){
											recyclerView.scrollToPosition(itemCount - 1);
										}
								        recyclerView.requestLayout();
								    }
								});
							}
							else if (autoSizeScrollViewAboveToolbar == true) {
								//Log.w(LCAT, " autoSizeScrollViewAboveToolbar setBottom :"+newBottomPadding);
								if (autoScrollToBottom == true && recyclerView != null){
									itemCount = recyclerView.getAdapter().getItemCount();
								}


								scrollingView.post(new Runnable() { 
								    @Override public void run() {
							    		scrollingTiView.getLayoutParams().optionBottom = new TiDimension(TiConvert.toString(newBottomPadding), TiDimension.TYPE_BOTTOM);

										if (autoScrollToBottom == true && isTiUIScrollView == false && itemCount > 0){
											recyclerView.scrollToPosition(itemCount - 1);
										}
										else if (autoScrollToBottom == true && isTiUIScrollView == true){
											Boolean smoothScrolling = ((NestedScrollView) scrollingView).isSmoothScrollingEnabled();
											((NestedScrollView) scrollingView).setSmoothScrollingEnabled(true);
											((NestedScrollView) scrollingView).fullScroll(View.FOCUS_DOWN);
											((NestedScrollView) scrollingView).setSmoothScrollingEnabled(smoothScrolling);
										}
								        scrollingView.requestLayout();
								    }
								});
					    	}
				    }
				});
	    	}
		}

		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
		}
	}


	// Constructor
	public ViewProxy()
	{
		super();
	}

	@Override
	public TiUIView createView(Activity activity)
	{

		TiUIView view = new InteractiveView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;

		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);
	}


	@Override
	public void release()
	{
		viewWrapper = null;
		containerView = null;
		super.release();
	}


	@Kroll.method
	public void addInteractiveKeyboardDismiss() {

	}

	@Nullable private static RecyclerView recursivelyFindRecyclerView(View view) {
		if (view instanceof ViewGroup) {
			ViewGroup viewGroup = (ViewGroup)view;          
			 
			if (!(viewGroup instanceof RecyclerView)) {             
				for (int i = 0; i < viewGroup.getChildCount(); i++) {

			 		RecyclerView result = recursivelyFindRecyclerView(viewGroup.getChildAt(i));                  
			 	
			 		if (result != null) {                     
			 			return result;                 
			 		}             
			 	}         
			} else {             
			 	RecyclerView result = (RecyclerView)viewGroup;             
			 	return result;         
			}     
		}  
		return null; 
	}

	private int getStatusBarHeight(Activity thisactivity) {
	    Rect r = new Rect();
	    thisactivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(r);
	    return r.top;
	}
	 
	private int determineActionBarHeight(Activity thisactivity) {
		TypedValue tv = new TypedValue();
		int actionBarHeight = 0;

		if (((AppCompatActivity)thisactivity).getSupportActionBar() != null) {
	        if (thisactivity.getTheme().resolveAttribute(R.attr.actionBarSize, tv, true)) {
	            actionBarHeight = TypedValue.complexToDimensionPixelSize(tv.data, thisactivity.getResources().getDisplayMetrics());
	        }
		}
        return actionBarHeight;
	}

	private int determineTitleBarHeight(Activity thisactivity) {
	    Rect windowRect = new Rect();
	    thisactivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(windowRect);
	    return windowRect.top;
	}
}
